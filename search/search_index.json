{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"workstation_setup \u00b6 Scripts to capture my workstation setups Prerequisites \u00b6 Install pre-requirements: sudo apt install -y git make git clone git@github.com:athackst/workstation_setup.git Install and setup workstation \u00b6 This installs the basics of my workstation make install Develop \u00b6 I have recently been playing with the idea of doing all/most development inside of docker containers. examples for example development processes dockerfiles for dockerfiles","title":"workstation_setup"},{"location":"#workstation_setup","text":"Scripts to capture my workstation setups","title":"workstation_setup"},{"location":"#prerequisites","text":"Install pre-requirements: sudo apt install -y git make git clone git@github.com:athackst/workstation_setup.git","title":"Prerequisites"},{"location":"#install-and-setup-workstation","text":"This installs the basics of my workstation make install","title":"Install and setup workstation"},{"location":"#develop","text":"I have recently been playing with the idea of doing all/most development inside of docker containers. examples for example development processes dockerfiles for dockerfiles","title":"Develop"},{"location":"dockerfiles/","text":"dockerfiles \u00b6 These are base docker images for developing code. You can use them as a base image for development with VSCode using container based development. Quick start \u00b6 Create the docker images ./update.sh all To see help information on the update script ./update.sh -h FAQ \u00b6 Q: Why build code inside a docker? Re-creatable building environment that can be duplicated in Continuous Integration or sent to others to duplicate issues. Q: What is needed to set up vscode to work with docker as a development container? You need to create a non-root user with the same user id and group as your user, and you need to mount your .ssh configuration inside the container.","title":"dockerfiles"},{"location":"dockerfiles/#dockerfiles","text":"These are base docker images for developing code. You can use them as a base image for development with VSCode using container based development.","title":"dockerfiles"},{"location":"dockerfiles/#quick-start","text":"Create the docker images ./update.sh all To see help information on the update script ./update.sh -h","title":"Quick start"},{"location":"dockerfiles/#faq","text":"Q: Why build code inside a docker? Re-creatable building environment that can be duplicated in Continuous Integration or sent to others to duplicate issues. Q: What is needed to set up vscode to work with docker as a development container? You need to create a non-root user with the same user id and group as your user, and you need to mount your .ssh configuration inside the container.","title":"FAQ"},{"location":"examples/","text":"Example workspaces \u00b6 Here are 3 examples of how to set up your docker development workflow with ROS. 1. Multi stage docker build ( ros2_crystal_multistage ) \u00b6 This will build and compile your code into a small output image by building your code during dockerfile creation. Pros: One file defines everything you need to create the image Repeatability built in Cons: Takes longer to compile when a file changes (about the same as building from scratch) 2. Docker development environment copied into final image ( ros2_crystal_dev_release ) \u00b6 This will build the workspace on your host machine using a docker image as the development environment. Pros: Fastest re-build time because you can use cmake cache Small output image possible by passing targets into final image Cons: Requires multiple dockerfiles to set up Not as repeatable (your local cache may affect build) 3. Docker development through VS Code ( ros2_dashing_vscode ) \u00b6 This will use the VS Code docker container plugin as the basis of development. Under-the-hood, vscode is running a docker container and mounting your source code into it. This gives you all the tooling you need to build your code and can enable standardization of tooling including linters. It also seamlessly integrates with IntelliSense (which is all sorts of awesome) and enables debugging through traditional debuggers ie gdb. It seems to follow the develop-release pattern with docker, where a develop container is created for compiling and a then the built assets can be copied into a deployment container. It is also possible to support multi-stage, but development would be in a docker-in-docker configuration. Pros: All developers using the same tools (including linters, etc) in an easy to share setup Supported IDE functionalities such as intellisense, code following, debugging, etc. Cons: Built targets have \u201croot\u201d permissions unless you\u2019ve updated your base docker image to have your user name/group. 4. Bazel workspace with VS Code ( bazel ) \u00b6 This will use a VS Code docker container plugin as the basis of development for a bazel environment.","title":"Example workspaces"},{"location":"examples/#example-workspaces","text":"Here are 3 examples of how to set up your docker development workflow with ROS.","title":"Example workspaces"},{"location":"examples/#1-multi-stage-docker-build-ros2_crystal_multistage","text":"This will build and compile your code into a small output image by building your code during dockerfile creation. Pros: One file defines everything you need to create the image Repeatability built in Cons: Takes longer to compile when a file changes (about the same as building from scratch)","title":"1. Multi stage docker build (ros2_crystal_multistage)"},{"location":"examples/#2-docker-development-environment-copied-into-final-image-ros2_crystal_dev_release","text":"This will build the workspace on your host machine using a docker image as the development environment. Pros: Fastest re-build time because you can use cmake cache Small output image possible by passing targets into final image Cons: Requires multiple dockerfiles to set up Not as repeatable (your local cache may affect build)","title":"2. Docker development environment copied into final image (ros2_crystal_dev_release)"},{"location":"examples/#3-docker-development-through-vs-code-ros2_dashing_vscode","text":"This will use the VS Code docker container plugin as the basis of development. Under-the-hood, vscode is running a docker container and mounting your source code into it. This gives you all the tooling you need to build your code and can enable standardization of tooling including linters. It also seamlessly integrates with IntelliSense (which is all sorts of awesome) and enables debugging through traditional debuggers ie gdb. It seems to follow the develop-release pattern with docker, where a develop container is created for compiling and a then the built assets can be copied into a deployment container. It is also possible to support multi-stage, but development would be in a docker-in-docker configuration. Pros: All developers using the same tools (including linters, etc) in an easy to share setup Supported IDE functionalities such as intellisense, code following, debugging, etc. Cons: Built targets have \u201croot\u201d permissions unless you\u2019ve updated your base docker image to have your user name/group.","title":"3. Docker development through VS Code (ros2_dashing_vscode)"},{"location":"examples/#4-bazel-workspace-with-vs-code-bazel","text":"This will use a VS Code docker container plugin as the basis of development for a bazel environment.","title":"4. Bazel workspace with VS Code (bazel)"},{"location":"examples/bazel/","text":"bazel \u00b6 An example workspace with bazel. Installation \u00b6 You\u2019ll need the following packages installed: vscode docker Usage \u00b6 Open this directory in vscode code workstation_setup/examples/bazel Set up your workspace \u00b6 Run the get_code script, then open this folder in vscode. ./get_code This will download the bazel example code repository. See bazel tutorials Build \u00b6 Tasks \u00b6 Go to Terminal->Run Build Task or type the shortcut command. Note The working directory for a running task needs to be set to the directory containing a WORKSPACE file. You can use vscode environment variables to set the worksapce { \"label\": \"build stage1\", \"type\": \"shell\", \"options\": { \"cwd\": \"${workspaceRoot}/examples/cpp-tutorial/stage1\" }, \"command\": \"bazel build //main:hello-world\", \"problemMatcher\": [ \"$gcc\" ], \"group\": \"build\" }, Command line \u00b6 Follow the instructions in the bazel tutorials cd examples/cpp-tutorial/stage1 bazel build :all","title":"bazel"},{"location":"examples/bazel/#bazel","text":"An example workspace with bazel.","title":"bazel"},{"location":"examples/bazel/#installation","text":"You\u2019ll need the following packages installed: vscode docker","title":"Installation"},{"location":"examples/bazel/#usage","text":"Open this directory in vscode code workstation_setup/examples/bazel","title":"Usage"},{"location":"examples/bazel/#set-up-your-workspace","text":"Run the get_code script, then open this folder in vscode. ./get_code This will download the bazel example code repository. See bazel tutorials","title":"Set up your workspace"},{"location":"examples/bazel/#build","text":"","title":"Build"},{"location":"examples/bazel/#tasks","text":"Go to Terminal->Run Build Task or type the shortcut command. Note The working directory for a running task needs to be set to the directory containing a WORKSPACE file. You can use vscode environment variables to set the worksapce { \"label\": \"build stage1\", \"type\": \"shell\", \"options\": { \"cwd\": \"${workspaceRoot}/examples/cpp-tutorial/stage1\" }, \"command\": \"bazel build //main:hello-world\", \"problemMatcher\": [ \"$gcc\" ], \"group\": \"build\" },","title":"Tasks"},{"location":"examples/bazel/#command-line","text":"Follow the instructions in the bazel tutorials cd examples/cpp-tutorial/stage1 bazel build :all","title":"Command line"},{"location":"examples/ros2_crystal_dev_release/","text":"ros2_crystal_dev_release \u00b6 This is an example of how to create a docker development workflow Quick start \u00b6 Run all the steps to get the code, build the development docker and build your code. make Set up \u00b6 Set up your workspace make setup Build \u00b6 Make the development environment docker make docker Install \u00b6 Make the workspace using the development docker make example Step-by-step \u00b6 Set up your workspace \u00b6 Create a directory to put your source code. example: mkdir -p src Clone the repositories you would like to build from source example: cd src git clone https://github.com/ros2/examples.git Build the dockerfile \u00b6 Edit the docker file to include all additional resources and build the development dockerfile. This file is special because it is built with your user id/group/name. This allows you to build within the docker workspace as yourself. cd ~/workstation_setup/examples/ros2_crystal_example_dev docker build -f develop.dockerfile -t athackst/ros2:crystal-example-dev --build-arg UID=$(id -u) --build-arg GID=$(id -g) --build-arg UNAME=$(whoami) . Build inside the docker image \u00b6 Run the docker image with the build function cd ~/ros2_ws docker run -v $HOME:$HOME athackst/ros2:crystal-example-dev /build.sh `pwd` Copy install targets into release docker image \u00b6 Build the release docker image that will copy the install targets into the image docker build -f release.dockerfile -t ros2:crystal-example-release .","title":"ros2_crystal_dev_release"},{"location":"examples/ros2_crystal_dev_release/#ros2_crystal_dev_release","text":"This is an example of how to create a docker development workflow","title":"ros2_crystal_dev_release"},{"location":"examples/ros2_crystal_dev_release/#quick-start","text":"Run all the steps to get the code, build the development docker and build your code. make","title":"Quick start"},{"location":"examples/ros2_crystal_dev_release/#set-up","text":"Set up your workspace make setup","title":"Set up"},{"location":"examples/ros2_crystal_dev_release/#build","text":"Make the development environment docker make docker","title":"Build"},{"location":"examples/ros2_crystal_dev_release/#install","text":"Make the workspace using the development docker make example","title":"Install"},{"location":"examples/ros2_crystal_dev_release/#step-by-step","text":"","title":"Step-by-step"},{"location":"examples/ros2_crystal_dev_release/#set-up-your-workspace","text":"Create a directory to put your source code. example: mkdir -p src Clone the repositories you would like to build from source example: cd src git clone https://github.com/ros2/examples.git","title":"Set up your workspace"},{"location":"examples/ros2_crystal_dev_release/#build-the-dockerfile","text":"Edit the docker file to include all additional resources and build the development dockerfile. This file is special because it is built with your user id/group/name. This allows you to build within the docker workspace as yourself. cd ~/workstation_setup/examples/ros2_crystal_example_dev docker build -f develop.dockerfile -t athackst/ros2:crystal-example-dev --build-arg UID=$(id -u) --build-arg GID=$(id -g) --build-arg UNAME=$(whoami) .","title":"Build the dockerfile"},{"location":"examples/ros2_crystal_dev_release/#build-inside-the-docker-image","text":"Run the docker image with the build function cd ~/ros2_ws docker run -v $HOME:$HOME athackst/ros2:crystal-example-dev /build.sh `pwd`","title":"Build inside the docker image"},{"location":"examples/ros2_crystal_dev_release/#copy-install-targets-into-release-docker-image","text":"Build the release docker image that will copy the install targets into the image docker build -f release.dockerfile -t ros2:crystal-example-release .","title":"Copy install targets into release docker image"},{"location":"examples/ros2_crystal_multistage/","text":"ros2_crystal_multistage \u00b6 This is an example of a multi-stage dockerfile to produce a target image with custom built targets. Quick start \u00b6 Build \u00b6 make example Uninstall \u00b6 make uninstall Step-by-step \u00b6 Setup your workspace \u00b6 mkdir -p src cp .rosinstall src/.rosinstall wstool up -t src Build the dockerfile \u00b6 docker build -f Dockerfile -t athackst/ros2:crystal-example .","title":"ros2_crystal_multistage"},{"location":"examples/ros2_crystal_multistage/#ros2_crystal_multistage","text":"This is an example of a multi-stage dockerfile to produce a target image with custom built targets.","title":"ros2_crystal_multistage"},{"location":"examples/ros2_crystal_multistage/#quick-start","text":"","title":"Quick start"},{"location":"examples/ros2_crystal_multistage/#build","text":"make example","title":"Build"},{"location":"examples/ros2_crystal_multistage/#uninstall","text":"make uninstall","title":"Uninstall"},{"location":"examples/ros2_crystal_multistage/#step-by-step","text":"","title":"Step-by-step"},{"location":"examples/ros2_crystal_multistage/#setup-your-workspace","text":"mkdir -p src cp .rosinstall src/.rosinstall wstool up -t src","title":"Setup your workspace"},{"location":"examples/ros2_crystal_multistage/#build-the-dockerfile","text":"docker build -f Dockerfile -t athackst/ros2:crystal-example .","title":"Build the dockerfile"},{"location":"examples/ros2_dashing_vscode/","text":"ros2_dashing_vscode \u00b6 This is an example using ros2 dashing + vscode + docker. Quick start \u00b6 Open this folder in vscode and load the container. Download the example package ./get_code.sh Build the code in the attached terminal. colcon build Detailed instructions \u00b6 Get the example code \u00b6 Run the script get_code to download the example code. ./get_code.sh This will download the ROS packages listed in the .rosinstall file. Note: you can also run mkdir -p src vcs import < .rosinstall src to get the sources listed in the .rosinstall package. Update the dockerfile for your user/group \u00b6 If you\u2019re user id/group is different than the default 1000/1000 for linux, you will need to edit the container with your user id/group. Note: To find your user id/group: bash id -u #user id ig -g #group id Open the folder in a remote container \u00b6 Open the command pallet and select the Remote-Containers: Open Folder in Container option. VSCode will build the docker file and mount the folder into the container. From here, you can build the source by running the build task. Terminal->Run Build task This will run colcon build in the current working directory. Deployment \u00b6 The deployment steps for this workflow are similar dev/release workflow. Development is performed in a different container than the release, where the build outputs are copied into the release container. Run the release script on the host computer. ./release.sh This will build the release container by copying the built targets into the host into the /opt/docker folder. docker build -f ./.releasecontainer/Dockerfile -t vscode/ros2:ros2_dashing_vscode . You may want to change the tag name to fit your project.","title":"ros2_dashing_vscode"},{"location":"examples/ros2_dashing_vscode/#ros2_dashing_vscode","text":"This is an example using ros2 dashing + vscode + docker.","title":"ros2_dashing_vscode"},{"location":"examples/ros2_dashing_vscode/#quick-start","text":"Open this folder in vscode and load the container. Download the example package ./get_code.sh Build the code in the attached terminal. colcon build","title":"Quick start"},{"location":"examples/ros2_dashing_vscode/#detailed-instructions","text":"","title":"Detailed instructions"},{"location":"examples/ros2_dashing_vscode/#get-the-example-code","text":"Run the script get_code to download the example code. ./get_code.sh This will download the ROS packages listed in the .rosinstall file. Note: you can also run mkdir -p src vcs import < .rosinstall src to get the sources listed in the .rosinstall package.","title":"Get the example code"},{"location":"examples/ros2_dashing_vscode/#update-the-dockerfile-for-your-usergroup","text":"If you\u2019re user id/group is different than the default 1000/1000 for linux, you will need to edit the container with your user id/group. Note: To find your user id/group: bash id -u #user id ig -g #group id","title":"Update the dockerfile for your user/group"},{"location":"examples/ros2_dashing_vscode/#open-the-folder-in-a-remote-container","text":"Open the command pallet and select the Remote-Containers: Open Folder in Container option. VSCode will build the docker file and mount the folder into the container. From here, you can build the source by running the build task. Terminal->Run Build task This will run colcon build in the current working directory.","title":"Open the folder in a remote container"},{"location":"examples/ros2_dashing_vscode/#deployment","text":"The deployment steps for this workflow are similar dev/release workflow. Development is performed in a different container than the release, where the build outputs are copied into the release container. Run the release script on the host computer. ./release.sh This will build the release container by copying the built targets into the host into the /opt/docker folder. docker build -f ./.releasecontainer/Dockerfile -t vscode/ros2:ros2_dashing_vscode . You may want to change the tag name to fit your project.","title":"Deployment"},{"location":"examples/ros_melodic_vscode/","text":"ros_melodic_vscode \u00b6 This is an example/test workspace for ros melodic. About \u00b6 This workspace is set up to test using a ros melodic dev container using the beginners tutorials from ROS. Installation \u00b6 You\u2019ll need the following packages installed: vscode docker Usage \u00b6 Open this directory in vscode code workstation_setup/examples/ros_melodic_vscode It will ask you if you\u2019d like to open using a container. Hit yes! Set up your workspace \u00b6 The first thing you\u2019re going to want to do is set up your workspace. wstool up This will download the beginner tutorial code into your workspace. See ros beginner tutorials . Build \u00b6 Tasks \u00b6 Go to Terminal->Run Build Task or type the shortcut command. Command line \u00b6 Alternatively, you can build from the command line. catkin build Run \u00b6 In order to run the tutorials, first you\u2019ll need to source your workspace. source devel/setup.bash Then run the tutorial you\u2019re interested in, for example roslaunch roscpp_tutorials talker_listener.launch","title":"ros_melodic_vscode"},{"location":"examples/ros_melodic_vscode/#ros_melodic_vscode","text":"This is an example/test workspace for ros melodic.","title":"ros_melodic_vscode"},{"location":"examples/ros_melodic_vscode/#about","text":"This workspace is set up to test using a ros melodic dev container using the beginners tutorials from ROS.","title":"About"},{"location":"examples/ros_melodic_vscode/#installation","text":"You\u2019ll need the following packages installed: vscode docker","title":"Installation"},{"location":"examples/ros_melodic_vscode/#usage","text":"Open this directory in vscode code workstation_setup/examples/ros_melodic_vscode It will ask you if you\u2019d like to open using a container. Hit yes!","title":"Usage"},{"location":"examples/ros_melodic_vscode/#set-up-your-workspace","text":"The first thing you\u2019re going to want to do is set up your workspace. wstool up This will download the beginner tutorial code into your workspace. See ros beginner tutorials .","title":"Set up your workspace"},{"location":"examples/ros_melodic_vscode/#build","text":"","title":"Build"},{"location":"examples/ros_melodic_vscode/#tasks","text":"Go to Terminal->Run Build Task or type the shortcut command.","title":"Tasks"},{"location":"examples/ros_melodic_vscode/#command-line","text":"Alternatively, you can build from the command line. catkin build","title":"Command line"},{"location":"examples/ros_melodic_vscode/#run","text":"In order to run the tutorials, first you\u2019ll need to source your workspace. source devel/setup.bash Then run the tutorial you\u2019re interested in, for example roslaunch roscpp_tutorials talker_listener.launch","title":"Run"}]}