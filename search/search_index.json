{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"workstation_setup Scripts to capture my workstation setups Prerequisites Install pre-requirements: sudo apt install -y git git clone git@github.com:athackst/workstation_setup.git Install and setup workstation Installs the basics of my workstation with make ./scripts/install Develop I have recently been playing with the idea of doing all/most development inside of docker containers. examples for example development processes Dockerfiles have been moved to athackst/dockerfiles Get the aliases in a container RUN wget -O /etc/profile.d/git_aliases.sh https://github.com/athackst/workstation_setup/raw/main/user/.aliases/git_aliases.sh \\ && echo \"source /etc/profile.d/git_aliases.sh\" >> \"/home/vscode/.bashrc\"","title":"workstation_setup"},{"location":"#workstation_setup","text":"Scripts to capture my workstation setups","title":"workstation_setup"},{"location":"#prerequisites","text":"Install pre-requirements: sudo apt install -y git git clone git@github.com:athackst/workstation_setup.git","title":"Prerequisites"},{"location":"#install-and-setup-workstation","text":"Installs the basics of my workstation with make ./scripts/install","title":"Install and setup workstation"},{"location":"#develop","text":"I have recently been playing with the idea of doing all/most development inside of docker containers. examples for example development processes Dockerfiles have been moved to athackst/dockerfiles","title":"Develop"},{"location":"#get-the-aliases-in-a-container","text":"RUN wget -O /etc/profile.d/git_aliases.sh https://github.com/athackst/workstation_setup/raw/main/user/.aliases/git_aliases.sh \\ && echo \"source /etc/profile.d/git_aliases.sh\" >> \"/home/vscode/.bashrc\"","title":"Get the aliases in a container"},{"location":"LICENSE/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"LICENSE"},{"location":"examples/","text":"Example workspaces Here are 3 examples of how to set up your docker development workflow with ROS. 1. Multi stage docker build ( ros2_crystal_multistage ) This will build and compile your code into a small output image by building your code during dockerfile creation. Pros: One file defines everything you need to create the image Repeatability built in Cons: Takes longer to compile when a file changes (about the same as building from scratch) 2. Docker development environment copied into final image ( ros2_crystal_dev_release ) This will build the workspace on your host machine using a docker image as the development environment. Pros: Fastest re-build time because you can use cmake cache Small output image possible by passing targets into final image Cons: Requires multiple dockerfiles to set up Not as repeatable (your local cache may affect build) 3. Docker development through VS Code ( ros2_dashing_vscode ) This will use the VS Code docker container plugin as the basis of development. Under-the-hood, vscode is running a docker container and mounting your source code into it. This gives you all the tooling you need to build your code and can enable standardization of tooling including linters. It also seamlessly integrates with IntelliSense (which is all sorts of awesome) and enables debugging through traditional debuggers ie gdb. It seems to follow the develop-release pattern with docker, where a develop container is created for compiling and a then the built assets can be copied into a deployment container. It is also possible to support multi-stage, but development would be in a docker-in-docker configuration. Pros: All developers using the same tools (including linters, etc) in an easy to share setup Supported IDE functionalities such as intellisense, code following, debugging, etc. Cons: Built targets have \"root\" permissions unless you've updated your base docker image to have your user name/group. 4. Bazel workspace with VS Code ( bazel ) This will use a VS Code docker container plugin as the basis of development for a bazel environment.","title":"Example workspaces"},{"location":"examples/#example-workspaces","text":"Here are 3 examples of how to set up your docker development workflow with ROS.","title":"Example workspaces"},{"location":"examples/#1-multi-stage-docker-build-ros2_crystal_multistage","text":"This will build and compile your code into a small output image by building your code during dockerfile creation. Pros: One file defines everything you need to create the image Repeatability built in Cons: Takes longer to compile when a file changes (about the same as building from scratch)","title":"1. Multi stage docker build (ros2_crystal_multistage)"},{"location":"examples/#2-docker-development-environment-copied-into-final-image-ros2_crystal_dev_release","text":"This will build the workspace on your host machine using a docker image as the development environment. Pros: Fastest re-build time because you can use cmake cache Small output image possible by passing targets into final image Cons: Requires multiple dockerfiles to set up Not as repeatable (your local cache may affect build)","title":"2. Docker development environment copied into final image (ros2_crystal_dev_release)"},{"location":"examples/#3-docker-development-through-vs-code-ros2_dashing_vscode","text":"This will use the VS Code docker container plugin as the basis of development. Under-the-hood, vscode is running a docker container and mounting your source code into it. This gives you all the tooling you need to build your code and can enable standardization of tooling including linters. It also seamlessly integrates with IntelliSense (which is all sorts of awesome) and enables debugging through traditional debuggers ie gdb. It seems to follow the develop-release pattern with docker, where a develop container is created for compiling and a then the built assets can be copied into a deployment container. It is also possible to support multi-stage, but development would be in a docker-in-docker configuration. Pros: All developers using the same tools (including linters, etc) in an easy to share setup Supported IDE functionalities such as intellisense, code following, debugging, etc. Cons: Built targets have \"root\" permissions unless you've updated your base docker image to have your user name/group.","title":"3. Docker development through VS Code (ros2_dashing_vscode)"},{"location":"examples/#4-bazel-workspace-with-vs-code-bazel","text":"This will use a VS Code docker container plugin as the basis of development for a bazel environment.","title":"4. Bazel workspace with VS Code (bazel)"},{"location":"examples/bazel/","text":"bazel An example workspace with bazel. Installation You'll need the following packages installed: vscode docker Usage Open this directory in vscode code workstation_setup/examples/bazel Set up your workspace Run the get_code script, then open this folder in vscode. ./get_code This will download the bazel example code repository. See bazel tutorials Build Tasks Go to Terminal->Run Build Task or type the shortcut command. Note The working directory for a running task needs to be set to the directory containing a WORKSPACE file. You can use vscode environment variables to set the worksapce { \"label\" : \"build stage1\" , \"type\" : \"shell\" , \"options\" : { \"cwd\" : \"${workspaceRoot}/examples/cpp-tutorial/stage1\" }, \"command\" : \"bazel build //main:hello-world\" , \"problemMatcher\" : [ \"$gcc\" ], \"group\" : \"build\" }, Command line Follow the instructions in the bazel tutorials cd examples/cpp-tutorial/stage1 bazel build :all","title":"bazel"},{"location":"examples/bazel/#bazel","text":"An example workspace with bazel.","title":"bazel"},{"location":"examples/bazel/#installation","text":"You'll need the following packages installed: vscode docker","title":"Installation"},{"location":"examples/bazel/#usage","text":"Open this directory in vscode code workstation_setup/examples/bazel","title":"Usage"},{"location":"examples/bazel/#set-up-your-workspace","text":"Run the get_code script, then open this folder in vscode. ./get_code This will download the bazel example code repository. See bazel tutorials","title":"Set up your workspace"},{"location":"examples/bazel/#build","text":"","title":"Build"},{"location":"examples/bazel/#tasks","text":"Go to Terminal->Run Build Task or type the shortcut command. Note The working directory for a running task needs to be set to the directory containing a WORKSPACE file. You can use vscode environment variables to set the worksapce { \"label\" : \"build stage1\" , \"type\" : \"shell\" , \"options\" : { \"cwd\" : \"${workspaceRoot}/examples/cpp-tutorial/stage1\" }, \"command\" : \"bazel build //main:hello-world\" , \"problemMatcher\" : [ \"$gcc\" ], \"group\" : \"build\" },","title":"Tasks"},{"location":"examples/bazel/#command-line","text":"Follow the instructions in the bazel tutorials cd examples/cpp-tutorial/stage1 bazel build :all","title":"Command line"},{"location":"examples/ros2_crystal_dev_release/","text":"ros2_crystal_dev_release This is an example of how to create a docker development workflow Quick start Run all the steps to get the code, build the development docker and build your code. make Set up Set up your workspace make setup Build Make the development environment docker make docker Install Make the workspace using the development docker make example Step-by-step Set up your workspace Create a directory to put your source code. example: mkdir -p src Clone the repositories you would like to build from source example: cd src git clone https://github.com/ros2/examples.git Build the dockerfile Edit the docker file to include all additional resources and build the development dockerfile. This file is special because it is built with your user id/group/name. This allows you to build within the docker workspace as yourself. cd ~/workstation_setup/examples/ros2_crystal_example_dev docker build -f develop.dockerfile -t althack/ros2:crystal-example-dev --build-arg UID = $( id -u ) --build-arg GID = $( id -g ) --build-arg UNAME = $( whoami ) . Build inside the docker image Run the docker image with the build function cd ~/ros2_ws docker run -v $HOME : $HOME althack/ros2:crystal-example-dev /build.sh ` pwd ` Copy install targets into release docker image Build the release docker image that will copy the install targets into the image docker build -f release.dockerfile -t ros2:crystal-example-release .","title":"ros2_crystal_dev_release"},{"location":"examples/ros2_crystal_dev_release/#ros2_crystal_dev_release","text":"This is an example of how to create a docker development workflow","title":"ros2_crystal_dev_release"},{"location":"examples/ros2_crystal_dev_release/#quick-start","text":"Run all the steps to get the code, build the development docker and build your code. make","title":"Quick start"},{"location":"examples/ros2_crystal_dev_release/#set-up","text":"Set up your workspace make setup","title":"Set up"},{"location":"examples/ros2_crystal_dev_release/#build","text":"Make the development environment docker make docker","title":"Build"},{"location":"examples/ros2_crystal_dev_release/#install","text":"Make the workspace using the development docker make example","title":"Install"},{"location":"examples/ros2_crystal_dev_release/#step-by-step","text":"","title":"Step-by-step"},{"location":"examples/ros2_crystal_dev_release/#set-up-your-workspace","text":"Create a directory to put your source code. example: mkdir -p src Clone the repositories you would like to build from source example: cd src git clone https://github.com/ros2/examples.git","title":"Set up your workspace"},{"location":"examples/ros2_crystal_dev_release/#build-the-dockerfile","text":"Edit the docker file to include all additional resources and build the development dockerfile. This file is special because it is built with your user id/group/name. This allows you to build within the docker workspace as yourself. cd ~/workstation_setup/examples/ros2_crystal_example_dev docker build -f develop.dockerfile -t althack/ros2:crystal-example-dev --build-arg UID = $( id -u ) --build-arg GID = $( id -g ) --build-arg UNAME = $( whoami ) .","title":"Build the dockerfile"},{"location":"examples/ros2_crystal_dev_release/#build-inside-the-docker-image","text":"Run the docker image with the build function cd ~/ros2_ws docker run -v $HOME : $HOME althack/ros2:crystal-example-dev /build.sh ` pwd `","title":"Build inside the docker image"},{"location":"examples/ros2_crystal_dev_release/#copy-install-targets-into-release-docker-image","text":"Build the release docker image that will copy the install targets into the image docker build -f release.dockerfile -t ros2:crystal-example-release .","title":"Copy install targets into release docker image"},{"location":"examples/ros2_crystal_multistage/","text":"ros2_crystal_multistage This is an example of a multi-stage dockerfile to produce a target image with custom built targets. Quick start Build make example Uninstall make uninstall Step-by-step Setup your workspace mkdir -p src cp .rosinstall src/.rosinstall wstool up -t src Build the dockerfile docker build -f Dockerfile -t althack/ros2:crystal-example .","title":"ros2_crystal_multistage"},{"location":"examples/ros2_crystal_multistage/#ros2_crystal_multistage","text":"This is an example of a multi-stage dockerfile to produce a target image with custom built targets.","title":"ros2_crystal_multistage"},{"location":"examples/ros2_crystal_multistage/#quick-start","text":"","title":"Quick start"},{"location":"examples/ros2_crystal_multistage/#build","text":"make example","title":"Build"},{"location":"examples/ros2_crystal_multistage/#uninstall","text":"make uninstall","title":"Uninstall"},{"location":"examples/ros2_crystal_multistage/#step-by-step","text":"","title":"Step-by-step"},{"location":"examples/ros2_crystal_multistage/#setup-your-workspace","text":"mkdir -p src cp .rosinstall src/.rosinstall wstool up -t src","title":"Setup your workspace"},{"location":"examples/ros2_crystal_multistage/#build-the-dockerfile","text":"docker build -f Dockerfile -t althack/ros2:crystal-example .","title":"Build the dockerfile"},{"location":"examples/ros2_dashing_vscode/","text":"ros2_dashing_vscode This is an example using ros2 dashing + vscode + docker. Quick start Open this folder in vscode and load the container. Download the example package ./get_code.sh Build the code in the attached terminal. colcon build Detailed instructions Get the example code Run the script get_code to download the example code. ./get_code.sh This will download the ROS packages listed in the .rosinstall file. Note: you can also run mkdir -p src vcs import < .rosinstall src to get the sources listed in the .rosinstall package. Update the dockerfile for your user/group If you're user id/group is different than the default 1000/1000 for linux, you will need to edit the container with your user id/group. Note: To find your user id/group: bash id -u #user id ig -g #group id Open the folder in a remote container Open the command pallet and select the Remote-Containers: Open Folder in Container option. VSCode will build the docker file and mount the folder into the container. From here, you can build the source by running the build task. Terminal->Run Build task This will run colcon build in the current working directory. Deployment The deployment steps for this workflow are similar dev/release workflow. Development is performed in a different container than the release, where the build outputs are copied into the release container. Run the release script on the host computer. ./release.sh This will build the release container by copying the built targets into the host into the /opt/docker folder. docker build -f ./.releasecontainer/Dockerfile -t vscode/ros2:ros2_dashing_vscode . You may want to change the tag name to fit your project.","title":"ros2_dashing_vscode"},{"location":"examples/ros2_dashing_vscode/#ros2_dashing_vscode","text":"This is an example using ros2 dashing + vscode + docker.","title":"ros2_dashing_vscode"},{"location":"examples/ros2_dashing_vscode/#quick-start","text":"Open this folder in vscode and load the container. Download the example package ./get_code.sh Build the code in the attached terminal. colcon build","title":"Quick start"},{"location":"examples/ros2_dashing_vscode/#detailed-instructions","text":"","title":"Detailed instructions"},{"location":"examples/ros2_dashing_vscode/#get-the-example-code","text":"Run the script get_code to download the example code. ./get_code.sh This will download the ROS packages listed in the .rosinstall file. Note: you can also run mkdir -p src vcs import < .rosinstall src to get the sources listed in the .rosinstall package.","title":"Get the example code"},{"location":"examples/ros2_dashing_vscode/#update-the-dockerfile-for-your-usergroup","text":"If you're user id/group is different than the default 1000/1000 for linux, you will need to edit the container with your user id/group. Note: To find your user id/group: bash id -u #user id ig -g #group id","title":"Update the dockerfile for your user/group"},{"location":"examples/ros2_dashing_vscode/#open-the-folder-in-a-remote-container","text":"Open the command pallet and select the Remote-Containers: Open Folder in Container option. VSCode will build the docker file and mount the folder into the container. From here, you can build the source by running the build task. Terminal->Run Build task This will run colcon build in the current working directory.","title":"Open the folder in a remote container"},{"location":"examples/ros2_dashing_vscode/#deployment","text":"The deployment steps for this workflow are similar dev/release workflow. Development is performed in a different container than the release, where the build outputs are copied into the release container. Run the release script on the host computer. ./release.sh This will build the release container by copying the built targets into the host into the /opt/docker folder. docker build -f ./.releasecontainer/Dockerfile -t vscode/ros2:ros2_dashing_vscode . You may want to change the tag name to fit your project.","title":"Deployment"},{"location":"examples/ros_melodic_vscode/","text":"ros_melodic_vscode This is an example/test workspace for ros melodic. About This workspace is set up to test using a ros melodic dev container using the beginners tutorials from ROS. Installation You'll need the following packages installed: vscode docker Usage Open this directory in vscode code workstation_setup/examples/ros_melodic_vscode It will ask you if you'd like to open using a container. Hit yes! Set up your workspace The first thing you're going to want to do is set up your workspace. wstool up This will download the beginner tutorial code into your workspace. See ros beginner tutorials . Build Tasks Go to Terminal->Run Build Task or type the shortcut command. Command line Alternatively, you can build from the command line. catkin build Run In order to run the tutorials, first you'll need to source your workspace. source devel/setup.bash Then run the tutorial you're interested in, for example roslaunch roscpp_tutorials talker_listener.launch","title":"ros_melodic_vscode"},{"location":"examples/ros_melodic_vscode/#ros_melodic_vscode","text":"This is an example/test workspace for ros melodic.","title":"ros_melodic_vscode"},{"location":"examples/ros_melodic_vscode/#about","text":"This workspace is set up to test using a ros melodic dev container using the beginners tutorials from ROS.","title":"About"},{"location":"examples/ros_melodic_vscode/#installation","text":"You'll need the following packages installed: vscode docker","title":"Installation"},{"location":"examples/ros_melodic_vscode/#usage","text":"Open this directory in vscode code workstation_setup/examples/ros_melodic_vscode It will ask you if you'd like to open using a container. Hit yes!","title":"Usage"},{"location":"examples/ros_melodic_vscode/#set-up-your-workspace","text":"The first thing you're going to want to do is set up your workspace. wstool up This will download the beginner tutorial code into your workspace. See ros beginner tutorials .","title":"Set up your workspace"},{"location":"examples/ros_melodic_vscode/#build","text":"","title":"Build"},{"location":"examples/ros_melodic_vscode/#tasks","text":"Go to Terminal->Run Build Task or type the shortcut command.","title":"Tasks"},{"location":"examples/ros_melodic_vscode/#command-line","text":"Alternatively, you can build from the command line. catkin build","title":"Command line"},{"location":"examples/ros_melodic_vscode/#run","text":"In order to run the tutorials, first you'll need to source your workspace. source devel/setup.bash Then run the tutorial you're interested in, for example roslaunch roscpp_tutorials talker_listener.launch","title":"Run"},{"location":"programs/","text":"Programs These are scripts that can be run as an executable once installed. It's a convenient way to add scripts to the program list. The program list allows for tab completion in the terminal. Installation To install just run pip install pip install . Usage gif-gen Generates a gif from a video, including automatic \"good\" compression gif-gen -h update-docker-images Updates (pulls) the docker images I want to have on my system. user-config-diff Diffs my configuration with the one in this package[^1]. user-config-update Update the user config in this package with my system config[^1]. [^1]: Location of this project must be in ~/Code","title":"Programs"},{"location":"programs/#programs","text":"These are scripts that can be run as an executable once installed. It's a convenient way to add scripts to the program list. The program list allows for tab completion in the terminal.","title":"Programs"},{"location":"programs/#installation","text":"To install just run pip install pip install .","title":"Installation"},{"location":"programs/#usage","text":"","title":"Usage"},{"location":"programs/#gif-gen","text":"Generates a gif from a video, including automatic \"good\" compression gif-gen -h","title":"gif-gen"},{"location":"programs/#update-docker-images","text":"Updates (pulls) the docker images I want to have on my system.","title":"update-docker-images"},{"location":"programs/#user-config-diff","text":"Diffs my configuration with the one in this package[^1].","title":"user-config-diff"},{"location":"programs/#user-config-update","text":"Update the user config in this package with my system config[^1]. [^1]: Location of this project must be in ~/Code","title":"user-config-update"}]}