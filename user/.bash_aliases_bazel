export BAZEL_WS=~/bazel_ws
export BAZEL_BIN_CACHE=~/.bazel-binaries
# Execute a binary.
b()
{
  if [[ "$#" -eq 0 ]]
  then
    echo Re-initializing bazel binary rule cache ...
    (cd $BAZEL_WS && bazel query 'kind(".*_binary rule", //...) union kind(".*_test rule", //...)' > $BAZEL_BIN_CACHE)
    N="$(cat $BAZEL_BIN_CACHE | wc -l)"
    echo "  ... found ${N} binaries."
    return 0
  fi
  binary="$1"
  shift
  for rule in $(cat $BAZEL_BIN_CACHE)
  do
    rule_binary=$(echo $rule | sed 's|^.*[:/]||')
    if [ "$rule_binary" == "$binary" ]
    then
      echo "Running bazel binary $rule ..."
      path=$BAZEL_WS/bazel-bin/$(echo $rule | sed -e 's|:|/|' -e 's|//||')
      $path "$@"
      return $?
    fi
  done
  echo "No bazel binary $binary found."
  return 1
}
# Tab-complete all bazel binaries.
_b()
{
  local cur binaries
  cur="${COMP_WORDS[COMP_CWORD]}"
  if [ $COMP_CWORD -eq 1 ]
  then
    binaries=$(cat $BAZEL_BIN_CACHE | sed 's|^.*[:/]||')
    COMPREPLY=($(compgen -W "${binaries}" -- ${cur}))
  else
    COMPREPLY=()
  fi
  return 0
}
complete -o default -F _b b